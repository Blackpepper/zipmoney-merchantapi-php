<?php
/**
 * OrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  zipMoney
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace zipMoney\Model;

use \ArrayAccess;

/**
 * OrderItem Class Doc Comment
 *
 * @category    Class
 * @package     zipMoney
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderItem implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'order-item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'amount' => 'float',
        'reference' => 'string',
        'description' => 'string',
        'quantity' => 'int',
        'type' => 'string',
        'image_uri' => 'string',
        'item_uri' => 'string',
        'product_code' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'amount' => 'amount',
        'reference' => 'reference',
        'description' => 'description',
        'quantity' => 'quantity',
        'type' => 'type',
        'image_uri' => 'image_uri',
        'item_uri' => 'item_uri',
        'product_code' => 'product_code'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'amount' => 'setAmount',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'quantity' => 'setQuantity',
        'type' => 'setType',
        'image_uri' => 'setImageUri',
        'item_uri' => 'setItemUri',
        'product_code' => 'setProductCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'amount' => 'getAmount',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'quantity' => 'getQuantity',
        'type' => 'getType',
        'image_uri' => 'getImageUri',
        'item_uri' => 'getItemUri',
        'product_code' => 'getProductCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_SKU = 'sku';
    const TYPE_TAX = 'tax';
    const TYPE_SHIPPING = 'shipping';
    const TYPE_DISCOUNT = 'discount';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_SKU,
            self::TYPE_TAX,
            self::TYPE_SHIPPING,
            self::TYPE_DISCOUNT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['image_uri'] = isset($data['image_uri']) ? $data['image_uri'] : null;
        $this->container['item_uri'] = isset($data['item_uri']) ? $data['item_uri'] : null;
        $this->container['product_code'] = isset($data['product_code']) ? $data['product_code'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 150)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 150.";
        }

        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalid_properties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['reference']) && (strlen($this->container['reference']) > 50)) {
            $invalid_properties[] = "invalid value for 'reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['description']) && (strlen($this->container['description']) > 250)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 250.";
        }

        if ($this->container['quantity'] === null) {
            $invalid_properties[] = "'quantity' can't be null";
        }
        if (($this->container['quantity'] < 1)) {
            $invalid_properties[] = "invalid value for 'quantity', must be bigger than or equal to 1.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["sku", "tax", "shipping", "discount"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of 'sku', 'tax', 'shipping', 'discount'.";
        }

        if (!is_null($this->container['image_uri']) && (strlen($this->container['image_uri']) > 500)) {
            $invalid_properties[] = "invalid value for 'image_uri', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['item_uri']) && (strlen($this->container['item_uri']) > 500)) {
            $invalid_properties[] = "invalid value for 'item_uri', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['product_code']) && (strlen($this->container['product_code']) > 50)) {
            $invalid_properties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 50.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 150) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['amount'] < 0) {
            return false;
        }
        if (strlen($this->container['reference']) > 50) {
            return false;
        }
        if (strlen($this->container['description']) > 250) {
            return false;
        }
        if ($this->container['quantity'] === null) {
            return false;
        }
        if ($this->container['quantity'] < 1) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["sku", "tax", "shipping", "discount"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['image_uri']) > 500) {
            return false;
        }
        if (strlen($this->container['item_uri']) > 500) {
            return false;
        }
        if (strlen($this->container['product_code']) > 50) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 150)) {
            throw new \InvalidArgumentException('invalid length for $name when calling OrderItem., must be smaller than or equal to 150.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets amount
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param float $amount
     * @return $this
     */
    public function setAmount($amount)
    {

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling OrderItem., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets reference
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     * @param string $reference
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (strlen($reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling OrderItem., must be smaller than or equal to 50.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (strlen($description) > 250)) {
            throw new \InvalidArgumentException('invalid length for $description when calling OrderItem., must be smaller than or equal to 250.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets quantity
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param int $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {

        if (($quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $quantity when calling OrderItem., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('sku', 'tax', 'shipping', 'discount');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'sku', 'tax', 'shipping', 'discount'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets image_uri
     * @return string
     */
    public function getImageUri()
    {
        return $this->container['image_uri'];
    }

    /**
     * Sets image_uri
     * @param string $image_uri
     * @return $this
     */
    public function setImageUri($image_uri)
    {
        if (!is_null($image_uri) && (strlen($image_uri) > 500)) {
            throw new \InvalidArgumentException('invalid length for $image_uri when calling OrderItem., must be smaller than or equal to 500.');
        }

        $this->container['image_uri'] = $image_uri;

        return $this;
    }

    /**
     * Gets item_uri
     * @return string
     */
    public function getItemUri()
    {
        return $this->container['item_uri'];
    }

    /**
     * Sets item_uri
     * @param string $item_uri
     * @return $this
     */
    public function setItemUri($item_uri)
    {
        if (!is_null($item_uri) && (strlen($item_uri) > 500)) {
            throw new \InvalidArgumentException('invalid length for $item_uri when calling OrderItem., must be smaller than or equal to 500.');
        }

        $this->container['item_uri'] = $item_uri;

        return $this;
    }

    /**
     * Gets product_code
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     * @param string $product_code
     * @return $this
     */
    public function setProductCode($product_code)
    {
        if (!is_null($product_code) && (strlen($product_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling OrderItem., must be smaller than or equal to 50.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\zipMoney\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\zipMoney\ObjectSerializer::sanitizeForSerialization($this));
    }
}


