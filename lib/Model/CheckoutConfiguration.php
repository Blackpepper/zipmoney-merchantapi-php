<?php
/**
 * CheckoutConfiguration
 *
 * PHP version 5
 *
 * @category Class
 * @package  zipMoney
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace zipMoney\Model;

use \ArrayAccess;

/**
 * CheckoutConfiguration Class Doc Comment
 *
 * @category    Class
 * @description Checkout configuration
 * @package     zipMoney
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CheckoutConfiguration implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'method' => 'string',
        'approved_uri' => 'string',
        'referred_uri' => 'string',
        'declined_uri' => 'string',
        'cancelled_uri' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'method' => 'method',
        'approved_uri' => 'approved_uri',
        'referred_uri' => 'referred_uri',
        'declined_uri' => 'declined_uri',
        'cancelled_uri' => 'cancelled_uri'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'method' => 'setMethod',
        'approved_uri' => 'setApprovedUri',
        'referred_uri' => 'setReferredUri',
        'declined_uri' => 'setDeclinedUri',
        'cancelled_uri' => 'setCancelledUri'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'method' => 'getMethod',
        'approved_uri' => 'getApprovedUri',
        'referred_uri' => 'getReferredUri',
        'declined_uri' => 'getDeclinedUri',
        'cancelled_uri' => 'getCancelledUri'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const METHOD_EXPRESS = 'express';
    const METHOD_STANDARD = 'standard';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_EXPRESS,
            self::METHOD_STANDARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['method'] = isset($data['method']) ? $data['method'] : 'standard';
        $this->container['approved_uri'] = isset($data['approved_uri']) ? $data['approved_uri'] : null;
        $this->container['referred_uri'] = isset($data['referred_uri']) ? $data['referred_uri'] : null;
        $this->container['declined_uri'] = isset($data['declined_uri']) ? $data['declined_uri'] : null;
        $this->container['cancelled_uri'] = isset($data['cancelled_uri']) ? $data['cancelled_uri'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = ["express", "standard"];
        if (!in_array($this->container['method'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'method', must be one of 'express', 'standard'.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = ["express", "standard"];
        if (!in_array($this->container['method'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets method
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     * @param string $method The checkout method
     * @return $this
     */
    public function setMethod($method)
    {
        $allowed_values = array('express', 'standard');
        if (!is_null($method) && (!in_array($method, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'method', must be one of 'express', 'standard'");
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets approved_uri
     * @return string
     */
    public function getApprovedUri()
    {
        return $this->container['approved_uri'];
    }

    /**
     * Sets approved_uri
     * @param string $approved_uri The URI to redirect if customer is approved
     * @return $this
     */
    public function setApprovedUri($approved_uri)
    {
        $this->container['approved_uri'] = $approved_uri;

        return $this;
    }

    /**
     * Gets referred_uri
     * @return string
     */
    public function getReferredUri()
    {
        return $this->container['referred_uri'];
    }

    /**
     * Sets referred_uri
     * @param string $referred_uri The URI to redirect if the customer is referred
     * @return $this
     */
    public function setReferredUri($referred_uri)
    {
        $this->container['referred_uri'] = $referred_uri;

        return $this;
    }

    /**
     * Gets declined_uri
     * @return string
     */
    public function getDeclinedUri()
    {
        return $this->container['declined_uri'];
    }

    /**
     * Sets declined_uri
     * @param string $declined_uri The URI to redirect if the customer is declined
     * @return $this
     */
    public function setDeclinedUri($declined_uri)
    {
        $this->container['declined_uri'] = $declined_uri;

        return $this;
    }

    /**
     * Gets cancelled_uri
     * @return string
     */
    public function getCancelledUri()
    {
        return $this->container['cancelled_uri'];
    }

    /**
     * Sets cancelled_uri
     * @param string $cancelled_uri The URI to redirect if the user cancels the checkout.
     * @return $this
     */
    public function setCancelledUri($cancelled_uri)
    {
        $this->container['cancelled_uri'] = $cancelled_uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\zipMoney\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\zipMoney\ObjectSerializer::sanitizeForSerialization($this));
    }
}


