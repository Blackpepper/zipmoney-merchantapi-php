<?php
/**
 * CheckoutInitiatorStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  zipMoneyPHP
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Merchant API
 *
 * ZipMoney Merchant API Initial build
 *
 * OpenAPI spec version: 2017-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace zipMoneyPHP\Model;

use \ArrayAccess;

/**
 * CheckoutInitiatorStatistics Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     zipMoneyPHP
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CheckoutInitiatorStatistics implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutInitiator_statistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'account_created' => '\DateTime',
        'sales_total_count' => 'int',
        'sales_total_amount' => 'float',
        'sales_avg_value' => 'float',
        'sales_max_value' => 'float',
        'refunds_total_amount' => 'float',
        'previous_chargeback' => 'bool',
        'currency' => 'string',
        'last_login' => '\DateTime'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'account_created' => 'account_created',
        'sales_total_count' => 'sales_total_count',
        'sales_total_amount' => 'sales_total_amount',
        'sales_avg_value' => 'sales_avg_value',
        'sales_max_value' => 'sales_max_value',
        'refunds_total_amount' => 'refunds_total_amount',
        'previous_chargeback' => 'previous_chargeback',
        'currency' => 'currency',
        'last_login' => 'last_login'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'account_created' => 'setAccountCreated',
        'sales_total_count' => 'setSalesTotalCount',
        'sales_total_amount' => 'setSalesTotalAmount',
        'sales_avg_value' => 'setSalesAvgValue',
        'sales_max_value' => 'setSalesMaxValue',
        'refunds_total_amount' => 'setRefundsTotalAmount',
        'previous_chargeback' => 'setPreviousChargeback',
        'currency' => 'setCurrency',
        'last_login' => 'setLastLogin'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'account_created' => 'getAccountCreated',
        'sales_total_count' => 'getSalesTotalCount',
        'sales_total_amount' => 'getSalesTotalAmount',
        'sales_avg_value' => 'getSalesAvgValue',
        'sales_max_value' => 'getSalesMaxValue',
        'refunds_total_amount' => 'getRefundsTotalAmount',
        'previous_chargeback' => 'getPreviousChargeback',
        'currency' => 'getCurrency',
        'last_login' => 'getLastLogin'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_created'] = isset($data['account_created']) ? $data['account_created'] : null;
        $this->container['sales_total_count'] = isset($data['sales_total_count']) ? $data['sales_total_count'] : null;
        $this->container['sales_total_amount'] = isset($data['sales_total_amount']) ? $data['sales_total_amount'] : null;
        $this->container['sales_avg_value'] = isset($data['sales_avg_value']) ? $data['sales_avg_value'] : null;
        $this->container['sales_max_value'] = isset($data['sales_max_value']) ? $data['sales_max_value'] : null;
        $this->container['refunds_total_amount'] = isset($data['refunds_total_amount']) ? $data['refunds_total_amount'] : null;
        $this->container['previous_chargeback'] = isset($data['previous_chargeback']) ? $data['previous_chargeback'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['last_login'] = isset($data['last_login']) ? $data['last_login'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets account_created
     * @return \DateTime
     */
    public function getAccountCreated()
    {
        return $this->container['account_created'];
    }

    /**
     * Sets account_created
     * @param \DateTime $account_created
     * @return $this
     */
    public function setAccountCreated($account_created)
    {
        $this->container['account_created'] = $account_created;

        return $this;
    }

    /**
     * Gets sales_total_count
     * @return int
     */
    public function getSalesTotalCount()
    {
        return $this->container['sales_total_count'];
    }

    /**
     * Sets sales_total_count
     * @param int $sales_total_count
     * @return $this
     */
    public function setSalesTotalCount($sales_total_count)
    {
        $this->container['sales_total_count'] = $sales_total_count;

        return $this;
    }

    /**
     * Gets sales_total_amount
     * @return float
     */
    public function getSalesTotalAmount()
    {
        return $this->container['sales_total_amount'];
    }

    /**
     * Sets sales_total_amount
     * @param float $sales_total_amount
     * @return $this
     */
    public function setSalesTotalAmount($sales_total_amount)
    {
        $this->container['sales_total_amount'] = $sales_total_amount;

        return $this;
    }

    /**
     * Gets sales_avg_value
     * @return float
     */
    public function getSalesAvgValue()
    {
        return $this->container['sales_avg_value'];
    }

    /**
     * Sets sales_avg_value
     * @param float $sales_avg_value
     * @return $this
     */
    public function setSalesAvgValue($sales_avg_value)
    {
        $this->container['sales_avg_value'] = $sales_avg_value;

        return $this;
    }

    /**
     * Gets sales_max_value
     * @return float
     */
    public function getSalesMaxValue()
    {
        return $this->container['sales_max_value'];
    }

    /**
     * Sets sales_max_value
     * @param float $sales_max_value
     * @return $this
     */
    public function setSalesMaxValue($sales_max_value)
    {
        $this->container['sales_max_value'] = $sales_max_value;

        return $this;
    }

    /**
     * Gets refunds_total_amount
     * @return float
     */
    public function getRefundsTotalAmount()
    {
        return $this->container['refunds_total_amount'];
    }

    /**
     * Sets refunds_total_amount
     * @param float $refunds_total_amount
     * @return $this
     */
    public function setRefundsTotalAmount($refunds_total_amount)
    {
        $this->container['refunds_total_amount'] = $refunds_total_amount;

        return $this;
    }

    /**
     * Gets previous_chargeback
     * @return bool
     */
    public function getPreviousChargeback()
    {
        return $this->container['previous_chargeback'];
    }

    /**
     * Sets previous_chargeback
     * @param bool $previous_chargeback
     * @return $this
     */
    public function setPreviousChargeback($previous_chargeback)
    {
        $this->container['previous_chargeback'] = $previous_chargeback;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets last_login
     * @return \DateTime
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     * @param \DateTime $last_login
     * @return $this
     */
    public function setLastLogin($last_login)
    {
        $this->container['last_login'] = $last_login;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\zipMoneyPHP\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\zipMoneyPHP\ObjectSerializer::sanitizeForSerialization($this));
    }
}


